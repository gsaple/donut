diff --git a/main.c b/main.c
index 1a02806..fcf1600 100644
--- a/main.c
+++ b/main.c
@@ -18,7 +18,7 @@ static int to_finish = 0;
 static int ppr_min = 5, ppr_max = 27;
 static int keypress;
 static struct winsize winsz;
-static Donut donut = {0.0};
+static Donut donut;
 static WINDOW *windows[4];
 
 void clear_screen() {
@@ -40,6 +40,10 @@ void setup() {
     //if it is the first time setup being called
     if (!ppr) {
         ioctl(STDIN_FILENO, TIOCGWINSZ, &winsz);
+	donut.cos_xrotate = 1.0;
+	donut.sin_xrotate = 0.0;
+	donut.cos_zrotate = 1.0;
+	donut.sin_zrotate = 0.0;
     }
     ppr = winsz.ws_ypixel / winsz.ws_row;
     ppc = winsz.ws_xpixel / winsz.ws_col;
diff --git a/shapes.c b/shapes.c
index dbb306d..5c7f54a 100644
--- a/shapes.c
+++ b/shapes.c
@@ -6,30 +6,42 @@
 
 #define SETBIT(A,k) (A[(k)/8] |= (1 << ((k)%8)))
 #define TESTBIT(A,k) (A[(k)/8] & (1 << ((k)%8)))
+
 extern int ppr, ppc, rows, cols, total, bytes;
 
+void R(float tan, float *cos, float *sin) {
+    float temp = *cos;
+    *cos -= tan * (*sin);
+    *sin += tan * temp;
+    temp = (3 - (*cos) * (*cos) - (*sin) * (*sin) ) / 2;
+    *cos *= temp;
+    *sin *= temp;
+}
+
 void draw_donut(Donut *donut, WINDOW *win) {
     uint8_t output[bytes]; //output bitmap
     memset(output, 0, bytes);
-    float cosA = cos(donut->x_rotate);
-    float sinA = sin(donut->x_rotate);
-    float cosB = cos(donut->z_rotate);
-    float sinB = sin(donut->z_rotate);
-    for (float theta = 0; theta < 6.28; theta += 0.07) {
-        float costheta = cos(theta);
-        float sintheta = sin(theta);
-        for(float phi = 0; phi < 6.28; phi += 0.02) {
-            float cosphi = cos(phi);
-    	    float sinphi = sin(phi);
+    float cosA = donut->cos_xrotate;
+    float sinA = donut->sin_xrotate;
+    float cosB = donut->cos_zrotate;
+    float sinB = donut->sin_zrotate;
+    float costheta = 1.0;
+    float sintheta = 0.0;
+    for (int j = 0; j < 90; j++) {
+        float cosphi = 1.0;
+        float sinphi = 0.0;
+	for (int i = 0; i < 314; i++) {
             float circlex = donut->R2 + donut->R1 * costheta;
             float circley = donut->R1 * sintheta;
     	    float x = circlex*(cosB*cosphi + sinA*sinB*sinphi) - circley*cosA*sinB; 
             float y = circlex*(sinB*cosphi - sinA*cosB*sinphi) + circley*cosA*cosB;
-    	    int proj_x = (int) (cols / 2 + x / ppc);
-    	    int proj_y = (int) (rows / 2 - y / ppr);
+            int proj_x = (int) ((cols >> 1) + x / ppc);
+            int proj_y = (int) ((rows >> 1) - y / ppr);
     	    int index = proj_x + cols * proj_y;
     	    SETBIT(output, index);
+	    R(0.02, &cosphi, &sinphi);
 	}
+        R(0.07, &costheta, &sintheta);
     }
     wmove(win, 0, 0);
     for(int k = 0; k < total; k++) {
@@ -40,8 +52,8 @@ void draw_donut(Donut *donut, WINDOW *win) {
             waddch(win, 32);// ascii space
         }
     }
-    donut->x_rotate += 0.07;
-    donut->z_rotate += 0.03;
+    R(0.07, &donut->cos_xrotate, &donut->sin_xrotate);
+    R(0.03, &donut->cos_zrotate, &donut->sin_zrotate);
     wrefresh(win);
     usleep(5000);
 }
diff --git a/shapes.h b/shapes.h
index 15997dc..f881000 100644
--- a/shapes.h
+++ b/shapes.h
@@ -1,8 +1,11 @@
 typedef struct Donut{
-  float x_rotate;
-  float z_rotate;
+  float cos_xrotate;
+  float sin_xrotate;
+  float cos_zrotate;
+  float sin_zrotate;
   float R1;
   float R2;
 } Donut;
 
+void R(float tan, float *cos, float *sin);
 void draw_donut(Donut *donut, WINDOW *win);
